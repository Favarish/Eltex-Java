/*
 * This file is generated by jOOQ.
 */
package ru.eltex.database.tables;


import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.Name;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.Internal;
import org.jooq.impl.TableImpl;

import ru.eltex.database.DefaultSchema;
import ru.eltex.database.tables.records.UserstableRecord;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.11.11"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Userstable extends TableImpl<UserstableRecord> {

    private static final long serialVersionUID = 977335035;

    /**
     * The reference instance of <code>usersTable</code>
     */
    public static final Userstable USERSTABLE = new Userstable();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<UserstableRecord> getRecordType() {
        return UserstableRecord.class;
    }

    /**
     * The column <code>usersTable.id</code>.
     */
    public final TableField<UserstableRecord, Integer> ID = createField("id", org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>usersTable.name</code>.
     */
    public final TableField<UserstableRecord, String> NAME = createField("name", org.jooq.impl.SQLDataType.CLOB, this, "");

    /**
     * The column <code>usersTable.age</code>.
     */
    public final TableField<UserstableRecord, Short> AGE = createField("age", org.jooq.impl.SQLDataType.SMALLINT, this, "");

    /**
     * The column <code>usersTable.phone</code>.
     */
    public final TableField<UserstableRecord, String> PHONE = createField("phone", org.jooq.impl.SQLDataType.VARCHAR(11), this, "");

    /**
     * Create a <code>usersTable</code> table reference
     */
    public Userstable() {
        this(DSL.name("usersTable"), null);
    }

    /**
     * Create an aliased <code>usersTable</code> table reference
     */
    public Userstable(String alias) {
        this(DSL.name(alias), USERSTABLE);
    }

    /**
     * Create an aliased <code>usersTable</code> table reference
     */
    public Userstable(Name alias) {
        this(alias, USERSTABLE);
    }

    private Userstable(Name alias, Table<UserstableRecord> aliased) {
        this(alias, aliased, null);
    }

    private Userstable(Name alias, Table<UserstableRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""));
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return DefaultSchema.DEFAULT_SCHEMA;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<UserstableRecord> getPrimaryKey() {
        return Internal.createUniqueKey(ru.eltex.database.tables.Userstable.USERSTABLE, "KEY_usersTable_PRIMARY", ru.eltex.database.tables.Userstable.USERSTABLE.ID);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<UserstableRecord>> getKeys() {
        return Arrays.<UniqueKey<UserstableRecord>>asList(
              Internal.createUniqueKey(ru.eltex.database.tables.Userstable.USERSTABLE, "KEY_usersTable_PRIMARY", ru.eltex.database.tables.Userstable.USERSTABLE.ID)
        );
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Userstable as(String alias) {
        return new Userstable(DSL.name(alias), this);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Userstable as(Name alias) {
        return new Userstable(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Userstable rename(String name) {
        return new Userstable(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Userstable rename(Name name) {
        return new Userstable(name, null);
    }
}
