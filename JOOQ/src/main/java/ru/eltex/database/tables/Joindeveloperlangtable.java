/*
 * This file is generated by jOOQ.
 */
package ru.eltex.database.tables;


import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.Name;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;

import ru.eltex.database.DefaultSchema;
import ru.eltex.database.tables.records.JoindeveloperlangtableRecord;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.11.11"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Joindeveloperlangtable extends TableImpl<JoindeveloperlangtableRecord> {

    private static final long serialVersionUID = 1649559419;

    /**
     * The reference instance of <code>joinDeveloperLangTable</code>
     */
    public static final Joindeveloperlangtable JOINDEVELOPERLANGTABLE = new Joindeveloperlangtable();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<JoindeveloperlangtableRecord> getRecordType() {
        return JoindeveloperlangtableRecord.class;
    }

    /**
     * The column <code>joinDeveloperLangTable.idDeveloper</code>.
     */
    public final TableField<JoindeveloperlangtableRecord, Integer> IDDEVELOPER = createField("idDeveloper", org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>joinDeveloperLangTable.idLang</code>.
     */
    public final TableField<JoindeveloperlangtableRecord, Integer> IDLANG = createField("idLang", org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * Create a <code>joinDeveloperLangTable</code> table reference
     */
    public Joindeveloperlangtable() {
        this(DSL.name("joinDeveloperLangTable"), null);
    }

    /**
     * Create an aliased <code>joinDeveloperLangTable</code> table reference
     */
    public Joindeveloperlangtable(String alias) {
        this(DSL.name(alias), JOINDEVELOPERLANGTABLE);
    }

    /**
     * Create an aliased <code>joinDeveloperLangTable</code> table reference
     */
    public Joindeveloperlangtable(Name alias) {
        this(alias, JOINDEVELOPERLANGTABLE);
    }

    private Joindeveloperlangtable(Name alias, Table<JoindeveloperlangtableRecord> aliased) {
        this(alias, aliased, null);
    }

    private Joindeveloperlangtable(Name alias, Table<JoindeveloperlangtableRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""));
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return DefaultSchema.DEFAULT_SCHEMA;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Joindeveloperlangtable as(String alias) {
        return new Joindeveloperlangtable(DSL.name(alias), this);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Joindeveloperlangtable as(Name alias) {
        return new Joindeveloperlangtable(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Joindeveloperlangtable rename(String name) {
        return new Joindeveloperlangtable(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Joindeveloperlangtable rename(Name name) {
        return new Joindeveloperlangtable(name, null);
    }
}
