/*
 * This file is generated by jOOQ.
 */
package ru.eltex.database.tables;


import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.Name;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.Internal;
import org.jooq.impl.TableImpl;

import ru.eltex.database.DefaultSchema;
import ru.eltex.database.tables.records.ManagerstableRecord;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.11.11"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Managerstable extends TableImpl<ManagerstableRecord> {

    private static final long serialVersionUID = 519193865;

    /**
     * The reference instance of <code>managersTable</code>
     */
    public static final Managerstable MANAGERSTABLE = new Managerstable();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<ManagerstableRecord> getRecordType() {
        return ManagerstableRecord.class;
    }

    /**
     * The column <code>managersTable.id</code>.
     */
    public final TableField<ManagerstableRecord, Integer> ID = createField("id", org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>managersTable.name</code>.
     */
    public final TableField<ManagerstableRecord, String> NAME = createField("name", org.jooq.impl.SQLDataType.CLOB, this, "");

    /**
     * The column <code>managersTable.age</code>.
     */
    public final TableField<ManagerstableRecord, Short> AGE = createField("age", org.jooq.impl.SQLDataType.SMALLINT, this, "");

    /**
     * The column <code>managersTable.phone</code>.
     */
    public final TableField<ManagerstableRecord, String> PHONE = createField("phone", org.jooq.impl.SQLDataType.VARCHAR(11), this, "");

    /**
     * Create a <code>managersTable</code> table reference
     */
    public Managerstable() {
        this(DSL.name("managersTable"), null);
    }

    /**
     * Create an aliased <code>managersTable</code> table reference
     */
    public Managerstable(String alias) {
        this(DSL.name(alias), MANAGERSTABLE);
    }

    /**
     * Create an aliased <code>managersTable</code> table reference
     */
    public Managerstable(Name alias) {
        this(alias, MANAGERSTABLE);
    }

    private Managerstable(Name alias, Table<ManagerstableRecord> aliased) {
        this(alias, aliased, null);
    }

    private Managerstable(Name alias, Table<ManagerstableRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""));
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return DefaultSchema.DEFAULT_SCHEMA;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<ManagerstableRecord> getPrimaryKey() {
        return Internal.createUniqueKey(ru.eltex.database.tables.Managerstable.MANAGERSTABLE, "KEY_managersTable_PRIMARY", ru.eltex.database.tables.Managerstable.MANAGERSTABLE.ID);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<ManagerstableRecord>> getKeys() {
        return Arrays.<UniqueKey<ManagerstableRecord>>asList(
              Internal.createUniqueKey(ru.eltex.database.tables.Managerstable.MANAGERSTABLE, "KEY_managersTable_PRIMARY", ru.eltex.database.tables.Managerstable.MANAGERSTABLE.ID)
        );
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Managerstable as(String alias) {
        return new Managerstable(DSL.name(alias), this);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Managerstable as(Name alias) {
        return new Managerstable(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Managerstable rename(String name) {
        return new Managerstable(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Managerstable rename(Name name) {
        return new Managerstable(name, null);
    }
}
